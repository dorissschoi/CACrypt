// Generated by CoffeeScript 1.10.0
(function() {
  var _, forge;

  forge = require('node-forge');

  _ = require('lodash');

  module.exports = function(opts) {
    if (opts == null) {
      opts = {};
    }
    return {
      encrypt: function(pubkey, message) {
        var cipher, encryptedKey, encryptedMessage, iv, key, publicKey;
        key = forge.random.getBytesSync(opts.keySize);
        iv = forge.random.getBytesSync(opts.keySize);
        cipher = forge.cipher.createCipher(opts.algorithm, key);
        cipher.start({
          iv: iv
        });
        cipher.update(forge.util.createBuffer(message));
        cipher.finish();
        encryptedMessage = cipher.output.getBytes();
        publicKey = forge.pki.publicKeyFromPem(pubkey);
        encryptedKey = publicKey.encrypt(key);
        return Promise.resolve({
          encryptedMessage: encryptedMessage,
          encryptedKey: encryptedKey,
          iv: iv
        });
      },
      decrypt: function(prikey, bundle) {
        var cipher, encryptedKey, encryptedMessage, key, privateKey;
        encryptedMessage = bundle.encryptedMessage;
        encryptedKey = bundle.encryptedKey;
        privateKey = forge.pki.privateKeyFromPem(prikey);
        key = privateKey.decrypt(encryptedKey);
        cipher = forge.cipher.createDecipher(opts.algorithm, key);
        cipher.start({
          iv: bundle.iv
        });
        cipher.update(forge.util.createBuffer(encryptedMessage));
        if (!cipher.finish()) {
          Promise.reject(new Error('Decryption failed'));
        }
        return Promise.resolve(cipher.output.getBytes());
      },
      sign: function(prikey, message) {
        var md, privateKey, signature;
        privateKey = forge.pki.privateKeyFromPem(prikey);
        md = forge.md.sha256.create();
        md.update(message, 'utf8');
        signature = privateKey.sign(md);
        return Promise.resolve({
          md: md,
          signature: signature
        });
      },
      verify: function(pubkey, bundle) {
        var md, publicKey, signature, verified;
        md = bundle.md;
        signature = bundle.signature;
        publicKey = forge.pki.publicKeyFromPem(pubkey);
        verified = publicKey.verify(md.digest().bytes(), signature);
        return Promise.resolve(verified);
      }
    };
  };

}).call(this);
